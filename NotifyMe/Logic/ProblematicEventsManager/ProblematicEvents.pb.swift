// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ProblematicEventWrapper.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct ProblematicEventWrapper {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var version: Int32 {
        get { return _version ?? 0 }
        set { _version = newValue }
    }

    /// Returns true if `version` has been explicitly set.
    var hasVersion: Bool { return self._version != nil }
    /// Clears the value of `version`. Subsequent reads from it will return its default value.
    mutating func clearVersion() { _version = nil }

    var events: [ProblematicEvent] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _version: Int32?
}

struct ProblematicEvent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var secretKey: Data {
        get { return _secretKey ?? Data() }
        set { _secretKey = newValue }
    }

    /// Returns true if `secretKey` has been explicitly set.
    var hasSecretKey: Bool { return self._secretKey != nil }
    /// Clears the value of `secretKey`. Subsequent reads from it will return its default value.
    mutating func clearSecretKey() { _secretKey = nil }

    var r2: Data {
        get { return _r2 ?? Data() }
        set { _r2 = newValue }
    }

    /// Returns true if `r2` has been explicitly set.
    var hasR2: Bool { return self._r2 != nil }
    /// Clears the value of `r2`. Subsequent reads from it will return its default value.
    mutating func clearR2() { _r2 = nil }

    var startTime: Int64 {
        get { return _startTime ?? 0 }
        set { _startTime = newValue }
    }

    /// Returns true if `startTime` has been explicitly set.
    var hasStartTime: Bool { return self._startTime != nil }
    /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
    mutating func clearStartTime() { _startTime = nil }

    var endTime: Int64 {
        get { return _endTime ?? 0 }
        set { _endTime = newValue }
    }

    /// Returns true if `endTime` has been explicitly set.
    var hasEndTime: Bool { return self._endTime != nil }
    /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
    mutating func clearEndTime() { _endTime = nil }

    var message: Data {
        get { return _message ?? Data() }
        set { _message = newValue }
    }

    /// Returns true if `message` has been explicitly set.
    var hasMessage: Bool { return self._message != nil }
    /// Clears the value of `message`. Subsequent reads from it will return its default value.
    mutating func clearMessage() { _message = nil }

    var nonce: Data {
        get { return _nonce ?? Data() }
        set { _nonce = newValue }
    }

    /// Returns true if `nonce` has been explicitly set.
    var hasNonce: Bool { return self._nonce != nil }
    /// Clears the value of `nonce`. Subsequent reads from it will return its default value.
    mutating func clearNonce() { _nonce = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _secretKey: Data?
    fileprivate var _r2: Data?
    fileprivate var _startTime: Int64?
    fileprivate var _endTime: Int64?
    fileprivate var _message: Data?
    fileprivate var _nonce: Data?
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProblematicEventWrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "ProblematicEventWrapper"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "version"),
        2: .same(proto: "events"),
    ]

    public var isInitialized: Bool {
        if self._version == nil { return false }
        if !SwiftProtobuf.Internal.areAllInitialized(self.events) { return false }
        return true
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularInt32Field(value: &self._version) }()
            case 2: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = _version {
            try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
        }
        if !events.isEmpty {
            try visitor.visitRepeatedMessageField(value: events, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: ProblematicEventWrapper, rhs: ProblematicEventWrapper) -> Bool {
        if lhs._version != rhs._version { return false }
        if lhs.events != rhs.events { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension ProblematicEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "ProblematicEvent"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "secretKey"),
        2: .same(proto: "r2"),
        3: .same(proto: "startTime"),
        4: .same(proto: "endTime"),
        5: .same(proto: "message"),
        6: .same(proto: "nonce"),
    ]

    public var isInitialized: Bool {
        if self._secretKey == nil { return false }
        if self._r2 == nil { return false }
        if self._startTime == nil { return false }
        if self._endTime == nil { return false }
        return true
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularBytesField(value: &self._secretKey) }()
            case 2: try { try decoder.decodeSingularBytesField(value: &self._r2) }()
            case 3: try { try decoder.decodeSingularInt64Field(value: &self._startTime) }()
            case 4: try { try decoder.decodeSingularInt64Field(value: &self._endTime) }()
            case 5: try { try decoder.decodeSingularBytesField(value: &self._message) }()
            case 6: try { try decoder.decodeSingularBytesField(value: &self._nonce) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = _secretKey {
            try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
        }
        if let v = _r2 {
            try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
        }
        if let v = _startTime {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
        }
        if let v = _endTime {
            try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
        }
        if let v = _message {
            try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
        }
        if let v = _nonce {
            try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: ProblematicEvent, rhs: ProblematicEvent) -> Bool {
        if lhs._secretKey != rhs._secretKey { return false }
        if lhs._r2 != rhs._r2 { return false }
        if lhs._startTime != rhs._startTime { return false }
        if lhs._endTime != rhs._endTime { return false }
        if lhs._message != rhs._message { return false }
        if lhs._nonce != rhs._nonce { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
